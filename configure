#!/usr/bin/python3

import os
import requests

import dropbox
from dropbox.files import WriteMode
from dropbox.exceptions import AuthError, BadInputError

import config 

VULTR_BASE = "https://api.vultr.com"

tempOptions={}
options = {}


def checkValidLink(link):
    try: 
        res = requests.head(link) 
    # TODO maybe except more specific issues
    except:
        return False

    if res.status_code not in [200,301,302]:
        return False
    return True


while True:
    valid = True
    dropboxToken = input("Dropbox token: ")
    dbx = dropbox.Dropbox(dropboxToken)
    try: 
        dbx.users_get_current_account()
    except (AuthError, BadInputError):
        print("Invalid token")
        valid = False
    
    if valid: break

tempOptions["dropbox-token"] = dropboxToken

#TODO make sure it doesn't already exist?
while True: 
    valid = True
    serverName = input("Server name: ").strip()

    if not serverName:
        print("Server name can't be empty")
        valid = False

    if valid: break


tempOptions["server-name"] = serverName

while True: 
    valid =True
    serverLink = input("Server Link: ").strip()
    if not serverLink:
        print("Server link can't be empty")
        valid = False

    if not checkValidLink(serverLink):
        print("Link not valid - doesn't give valid response")
        valid = False

    if valid: break

options["server-link"] = serverLink

while True:
    valid = True
    extract = input("Does the server need to be unzipped y/n: ").strip().lower()

    if extract.startswith('y'):
        extract = True
    elif extract.startswith('n'):
        extract = False
    else:
        valid = False

    if valid: break 

options["extract"] = extract

while True:
    valid = True
    rootDirectory = input("Current location of minecraft server: ").strip()
    rootDirectory = os.path.expanduser(rootDirectory)
    if not os.path.isdir(rootDirectory):
        valid = False
        print("Invalid directory")

    if valid: break

tempOptions["root-directory"] = rootDirectory


defaultStartCmd = "java -jar -Xmx1792M server.jar nogui"
startCmd = input(f"Command to start the server: ({defaultStartCmd})").strip()
if not startCmd:
    startCmd = defaultStartCmd

options["start-cmd"] = startCmd

while True:
    valid = True
    vultrToken = input("Vultr token (for destroy script): ").strip()
    res = requests.get(f'{VULTR_BASE}/v1/server/list', headers={'API-Key':vultrToken})
    if res.status_code != 200:
        print ("Invalid token")
        valid = False

    if valid: break
options["vultr-token"] = vultrToken


print(options)
print(tempOptions)

config.save_config(options)
config.save_temp_config(tempOptions)


# upload the config to the dropbox thingy

dbx = dropbox.Dropbox(dropboxToken)

with open("config.json", "rb") as f:
    dbx.files_upload(f.read(), f"/{serverName}/config.json", mode=WriteMode('overwrite'))